= diamond

{MIDI arpeggiator}[http://en.wikipedia.org/wiki/Arpeggiator#Arpeggiator] in Ruby

{pic}[http://images.treetrouble.net/images/diamond.jpg]

== Features

* Classic arpeggiator functions
* Uses {unimidi}[http://github.com/arirusso/unimidi] for cross-platform compatibility
* Run as a background thread for {live coding}[http://en.wikipedia.org/wiki/Live_coding]
* Sync to and from MIDI clock
* Sync between multiple Diamond instances
* {Preset}[http://github.com/arirusso/diamond/blob/master/lib/diamond/patterns.rb] and {user-definable}[http://github.com/arirusso/diamond/blob/master/examples/define_pattern.rb] pattern algorithms 

== Installation

  gem install diamond
  
== Requirements

Ruby 1.9.2 or JRuby in 1.9 mode

Gem Dependencies:

{midi-eye}[http://github.com/arirusso/midi-eye], {midi-message}[http://github.com/arirusso/midi-message], {topaz}[http://github.com/arirusso/topaz], and {unimidi}[http://github.com/arirusso/unimidi]

these will install automatically with the gem

== Usage

  require "diamond"

First, select a MIDI output using unimidi.  ({more about this...}[http://github.com/arirusso/unimidi/blob/master/examples/select_a_device.rb])

  @output = UniMIDI::Output.first.open

The Arpeggiator has a number of {optional parameters}[].  For this example, here's a straightforward setup

  opts = { 
    :gate => 90, 
    :interval => 7,
    :midi => @output,
    :pattern => Diamond::Pattern["UpDown"],
    :range => 4,     
    :rate => 8
  }

Create an Arpeggiator object, passing in a tempo value and the options above. In this case the tempo will be 138 BPM

  arp = Diamond::Arpeggiator.new(138, opts) 

Of course, an Arpeggiator needs notes to work with. As you might expect, it is easy to use a MIDI input for that. (see example). However, again for the sake of simplicity here is a chord in Ruby

chord = ["C3", "G3", "Bb3", "A4"]

Use Arpeggiator#add and Arpeggiator#remove to change the notes that the arpeggiator sees. (more...)

arp.add(chord)

If you are working in {irb}[http://en.wikipedia.org/wiki/Interactive_Ruby_Shell], you can start the arpeggiator in a background thread by passing an option :background => true to Arpeggiator#start.  That will allow you to live code, sync it other arpeggiators, or just run another foreground process. 

  arp.start(:background => true)

All of the {arpeggiator options}[] can be controlled on the on the fly

  arp.rate = 16
  arp.gate = 20
  arp.remove(chord.last)

The screencast video above shows Diamond being live coded in this way. ({Read how this is done}[])

==== Links:

* {Example of syncing Diamond to external MIDI clock}[http://github.com/arirusso/diamond/blob/master/examples/midi_sync.rb]
* Feeding notes to Diamond using a MIDI controller
* Feeding notes to Diamond using midi-message objects 
* Live coding Diamond and chaining multiple arpeggiators 

== Other Documentation

* {examples}[http://github.com/arirusso/diamond/tree/master/examples]
* {rdoc}[http://rdoc.info/gems/diamond] 

== Author

* {Ari Russo}[http://github.com/arirusso] <ari.russo at gmail.com>

== License

Apache 2.0, See the file LICENSE

Copyright (c) 2011 Ari Russo

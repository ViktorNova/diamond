= diamond

{MIDI arpeggiator}[http://en.wikipedia.org/wiki/Arpeggiator#Arpeggiator] in Ruby

== Installation

  gem install diamond
  
== Gem dependencies

* {midi-eye}[http://github.com/arirusso/midi-eye]
* {midi-message}[http://github.com/arirusso/midi-message]
* {topaz}[http://github.com/arirusso/topaz]
* {unimidi}[http://github.com/arirusso/unimidi]

these will install automatically with the gem

== Usage

  require "diamond"

The Arpeggiator has a number of options that you can control. {Click here}[options] for a more in-depth explanation of these options.
 
  opts = { 
    :gate => 90, 
    :range => 4, 
    :interval => 7,
    :offset => 1,
    :midi => UniMIDI::Output.first.open,
    :rate => 8
  }
  
Then instantiate the Arpeggiator, passing in a tempo value. In this case 138 BPM

  arp = Diamond::Arpeggiator.new(138, opts)
  
Of course, the Arpeggiator needs input notes

  chord = [
    MIDIMessage::NoteOn["C4"].new(0, 100),
    MIDIMessage::NoteOn["E4"].new(0, 100),
    MIDIMessage::NoteOn["G4"].new(0, 100)
  ]

You can use Arpeggiator#add and Arpeggiator#remove to control the input notes and chords.

  arp.add(chord)
  
If you are using this example in irb, you can start the arpeggiator in a background thread.  That will allow you to {live code}[http://en.wikipedia.org/wiki/Live_coding], sync it to another arpeggiator, or just run another foreground process. 
   
  arp.start(:background => true)

To start the arpeggiator in the foreground instead use

  arp.start
  
Read more about {live coding with Diamond}[blogpost]
  
Read about {syncing}[blogpost] multiple Arpeggiators and {Topaz tempo generators}[http://github.com/arirusso/topaz] {here}[blogpost]
    
== Other Documentation

* {examples}[http://github.com/arirusso/diamond/tree/master/examples]
* {rdoc}[http://rdoc.info/gems/diamond] 

== Author

* {Ari Russo}[http://github.com/arirusso] <ari.russo at gmail.com>

== License

Apache 2.0, See the file LICENSE

Copyright (c) 2011 Ari Russo
